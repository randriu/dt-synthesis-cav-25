mdp
const int deadline = 1;
const int rc_fast_max = 85;
const int rc_fast_min = 76;
const int rc_slow_max = 167;
const int rc_slow_min = 159;
const int delay = 3;
const double fast = 1/2;
const double slow = (1 - 1/2);



module wire12
	w12: [0..9] init 0;
	y1: [0..(3 + 1)] init 0;
	y2: [0..(3 + 1)] init 0;
	[snd_req12] (w12 = 0) -> 1 : (w12' = 1) & (y1' = 0) & (y2' = 0);
	[snd_ack12] (w12 = 0) -> 1 : (w12' = 3) & (y1' = 0) & (y2' = 0);
	[snd_idle12] (w12 = 0) -> 1 : (w12' = 5) & (y1' = 0) & (y2' = 0);
	[time] (w12 = 0) -> 1 : true;
	[snd_req12] (w12 = 1) -> 1 : (w12' = 1);
	[rec_req12] (w12 = 1) -> 1 : (w12' = 0) & (y1' = 0) & (y2' = 0);
	[snd_ack12] (w12 = 1) -> 1 : (w12' = 2) & (y2' = 0);
	[snd_idle12] (w12 = 1) -> 1 : (w12' = 8) & (y2' = 0);
	[time] ((w12 = 1) & (y2 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
	[snd_ack12] (w12 = 2) -> 1 : (w12' = 2);
	[rec_req12] (w12 = 2) -> 1 : (w12' = 3);
	[time] ((w12 = 2) & (y1 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
	[snd_ack12] (w12 = 3) -> 1 : (w12' = 3);
	[rec_ack12] (w12 = 3) -> 1 : (w12' = 0) & (y1' = 0) & (y2' = 0);
	[snd_idle12] (w12 = 3) -> 1 : (w12' = 4) & (y2' = 0);
	[snd_req12] (w12 = 3) -> 1 : (w12' = 7) & (y2' = 0);
	[time] ((w12 = 3) & (y2 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
	[snd_idle12] (w12 = 4) -> 1 : (w12' = 4);
	[rec_ack12] (w12 = 4) -> 1 : (w12' = 5);
	[time] ((w12 = 4) & (y1 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
	[snd_idle12] (w12 = 5) -> 1 : (w12' = 5);
	[rec_idle12] (w12 = 5) -> 1 : (w12' = 0) & (y1' = 0) & (y2' = 0);
	[snd_req12] (w12 = 5) -> 1 : (w12' = 6) & (y2' = 0);
	[snd_ack12] (w12 = 5) -> 1 : (w12' = 9) & (y2' = 0);
	[time] ((w12 = 5) & (y2 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
	[snd_req12] (w12 = 6) -> 1 : (w12' = 6);
	[rec_idle12] (w12 = 6) -> 1 : (w12' = 1);
	[time] ((w12 = 6) & (y1 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
	[snd_req12] (w12 = 7) -> 1 : (w12' = 7);
	[rec_ack12] (w12 = 7) -> 1 : (w12' = 1);
	[time] ((w12 = 7) & (y1 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
	[snd_idle12] (w12 = 8) -> 1 : (w12' = 8);
	[rec_req12] (w12 = 8) -> 1 : (w12' = 5);
	[time] ((w12 = 8) & (y1 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
	[snd_ack12] (w12 = 9) -> 1 : (w12' = 9);
	[rec_idle12] (w12 = 9) -> 1 : (w12' = 3);
	[time] ((w12 = 9) & (y1 < 3)) -> 1 : (y1' = (min((y1 + 1), 4))) & (y2' = (min((y2 + 1), 4)));
endmodule

module node1
	x1: [0..168] init 0;
	s1: [0..8] init 0;
	[snd_idle12] (s1 = 0) -> 1/2 : (x1' = 0) & (s1' = 2) + 1/2 : (x1' = 0) & (s1' = 3);
	[rec_idle21] (s1 = 0) -> 1 : (s1' = 1);
	[snd_idle12] (s1 = 1) -> 1/2 : (x1' = 0) & (s1' = 4) + 1/2 : (x1' = 0) & (s1' = 5);
	[rec_req21] (s1 = 1) -> 1 : (s1' = 0);
	[rec_idle21] (s1 = 2) -> 1 : (s1' = 4);
	[snd_ack12] ((s1 = 2) & (x1 >= 76)) -> 1 : (x1' = 0) & (s1' = 7);
	[time] ((s1 = 2) & (x1 < 85)) -> 1 : (x1' = (min((x1 + 1), 168)));
	[rec_idle21] (s1 = 3) -> 1 : (s1' = 5);
	[snd_ack12] ((s1 = 3) & (x1 >= 159)) -> 1 : (x1' = 0) & (s1' = 7);
	[time] ((s1 = 3) & (x1 < 167)) -> 1 : (x1' = (min((x1 + 1), 168)));
	[rec_req21] (s1 = 4) -> 1 : (s1' = 2);
	[snd_req12] ((s1 = 4) & (x1 >= 76)) -> 1 : (x1' = 0) & (s1' = 6);
	[time] ((s1 = 4) & (x1 < 85)) -> 1 : (x1' = (min((x1 + 1), 168)));
	[rec_req21] (s1 = 5) -> 1 : (s1' = 3);
	[snd_req12] ((s1 = 5) & (x1 >= 159)) -> 1 : (x1' = 0) & (s1' = 6);
	[time] ((s1 = 5) & (x1 < 167)) -> 1 : (x1' = (min((x1 + 1), 168)));
	[rec_req21] (s1 = 6) -> 1 : (s1' = 0);
	[rec_ack21] (s1 = 6) -> 1 : (s1' = 8);
	[time] (s1 = 6) -> 1 : true;
	[node1_cmd_56] ((s1 = 7) & (s2 = 8)) -> 1 : true;
	[node1_cmd_57] ((s1 = 8) & (s2 = 7)) -> 1 : true;
	[time] (s1 = 7) -> 1 : true;
	[time] (s1 = 8) -> 1 : true;
endmodule

module wire21
	w21: [0..9] init 0;
	z1: [0..(3 + 1)] init 0;
	z2: [0..(3 + 1)] init 0;
	[snd_req21] (w21 = 0) -> 1 : (w21' = 1) & (z1' = 0) & (z2' = 0);
	[snd_ack21] (w21 = 0) -> 1 : (w21' = 3) & (z1' = 0) & (z2' = 0);
	[snd_idle21] (w21 = 0) -> 1 : (w21' = 5) & (z1' = 0) & (z2' = 0);
	[time] (w21 = 0) -> 1 : true;
	[snd_req21] (w21 = 1) -> 1 : (w21' = 1);
	[rec_req21] (w21 = 1) -> 1 : (w21' = 0) & (z1' = 0) & (z2' = 0);
	[snd_ack21] (w21 = 1) -> 1 : (w21' = 2) & (z2' = 0);
	[snd_idle21] (w21 = 1) -> 1 : (w21' = 8) & (z2' = 0);
	[time] ((w21 = 1) & (z2 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
	[snd_ack21] (w21 = 2) -> 1 : (w21' = 2);
	[rec_req21] (w21 = 2) -> 1 : (w21' = 3);
	[time] ((w21 = 2) & (z1 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
	[snd_ack21] (w21 = 3) -> 1 : (w21' = 3);
	[rec_ack21] (w21 = 3) -> 1 : (w21' = 0) & (z1' = 0) & (z2' = 0);
	[snd_idle21] (w21 = 3) -> 1 : (w21' = 4) & (z2' = 0);
	[snd_req21] (w21 = 3) -> 1 : (w21' = 7) & (z2' = 0);
	[time] ((w21 = 3) & (z2 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
	[snd_idle21] (w21 = 4) -> 1 : (w21' = 4);
	[rec_ack21] (w21 = 4) -> 1 : (w21' = 5);
	[time] ((w21 = 4) & (z1 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
	[snd_idle21] (w21 = 5) -> 1 : (w21' = 5);
	[rec_idle21] (w21 = 5) -> 1 : (w21' = 0) & (z1' = 0) & (z2' = 0);
	[snd_req21] (w21 = 5) -> 1 : (w21' = 6) & (z2' = 0);
	[snd_ack21] (w21 = 5) -> 1 : (w21' = 9) & (z2' = 0);
	[time] ((w21 = 5) & (z2 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
	[snd_req21] (w21 = 6) -> 1 : (w21' = 6);
	[rec_idle21] (w21 = 6) -> 1 : (w21' = 1);
	[time] ((w21 = 6) & (z1 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
	[snd_req21] (w21 = 7) -> 1 : (w21' = 7);
	[rec_ack21] (w21 = 7) -> 1 : (w21' = 1);
	[time] ((w21 = 7) & (z1 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
	[snd_idle21] (w21 = 8) -> 1 : (w21' = 8);
	[rec_req21] (w21 = 8) -> 1 : (w21' = 5);
	[time] ((w21 = 8) & (z1 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
	[snd_ack21] (w21 = 9) -> 1 : (w21' = 9);
	[rec_idle21] (w21 = 9) -> 1 : (w21' = 3);
	[time] ((w21 = 9) & (z1 < 3)) -> 1 : (z1' = (min((z1 + 1), 4))) & (z2' = (min((z2 + 1), 4)));
endmodule

module node2
	x2: [0..168] init 0;
	s2: [0..8] init 0;
	[snd_idle21] (s2 = 0) -> 1/2 : (x2' = 0) & (s2' = 2) + 1/2 : (x2' = 0) & (s2' = 3);
	[rec_idle12] (s2 = 0) -> 1 : (s2' = 1);
	[snd_idle21] (s2 = 1) -> 1/2 : (x2' = 0) & (s2' = 4) + 1/2 : (x2' = 0) & (s2' = 5);
	[rec_req12] (s2 = 1) -> 1 : (s2' = 0);
	[rec_idle12] (s2 = 2) -> 1 : (s2' = 4);
	[snd_ack21] ((s2 = 2) & (x2 >= 76)) -> 1 : (x2' = 0) & (s2' = 7);
	[time] ((s2 = 2) & (x2 < 85)) -> 1 : (x2' = (min((x2 + 1), 168)));
	[rec_idle12] (s2 = 3) -> 1 : (s2' = 5);
	[snd_ack21] ((s2 = 3) & (x2 >= 159)) -> 1 : (x2' = 0) & (s2' = 7);
	[time] ((s2 = 3) & (x2 < 167)) -> 1 : (x2' = (min((x2 + 1), 168)));
	[rec_req12] (s2 = 4) -> 1 : (s2' = 2);
	[snd_req21] ((s2 = 4) & (x2 >= 76)) -> 1 : (x2' = 0) & (s2' = 6);
	[time] ((s2 = 4) & (x2 < 85)) -> 1 : (x2' = (min((x2 + 1), 168)));
	[rec_req12] (s2 = 5) -> 1 : (s2' = 3);
	[snd_req21] ((s2 = 5) & (x2 >= 159)) -> 1 : (x2' = 0) & (s2' = 6);
	[time] ((s2 = 5) & (x2 < 167)) -> 1 : (x2' = (min((x2 + 1), 168)));
	[rec_req12] (s2 = 6) -> 1 : (s2' = 0);
	[rec_ack12] (s2 = 6) -> 1 : (s2' = 8);
	[time] (s2 = 6) -> 1 : true;
	[node2_cmd_116] ((s2 = 7) & (s1 = 8)) -> 1 : true;
	[node2_cmd_117] ((s2 = 8) & (s1 = 7)) -> 1 : true;
	[time] (s2 = 7) -> 1 : true;
	[time] (s2 = 8) -> 1 : true;
endmodule

rewards "time"
	[time] true: 1;
endrewards

label "goal" = (((s1 = 8) & (s2 = 7)) | ((s1 = 7) & (s2 = 8)));
