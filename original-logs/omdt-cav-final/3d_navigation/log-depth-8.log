Solving...
Starting with fixed depth 8
Set parameter Username
Academic license - for non-commercial use only - expires 2025-09-20
Set parameter Threads to value 1
Set parameter TimeLimit to value 1200
Gurobi Optimizer version 10.0.0 build v10.0.0rc2 (linux64)

CPU model: AMD EPYC 9124 16-Core Processor, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 32 physical cores, 64 logical processors, using up to 1 threads

Optimize a model with 257511 rows, 39242 columns and 2474298 nonzeros
Model fingerprint: 0x06478003
Variable types: 875 continuous, 38367 integer (38367 binary)
Coefficient statistics:
  Matrix range     [2e-03, 1e+02]
  Objective range  [7e-03, 2e-01]
  Bounds range     [1e+00, 1e+02]
  RHS range        [1e+00, 8e+00]
Presolve removed 2805 rows and 1785 columns
Presolve time: 2.86s
Presolved: 254706 rows, 37457 columns, 2451167 nonzeros
Variable types: 875 continuous, 36582 integer (36582 binary)
Found heuristic solution: objective 0.0000012
Root relaxation presolved: 37457 rows, 292163 columns, 2488624 nonzeros


Root simplex log...

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    3.3324097e+01   0.000000e+00   6.481330e+02      5s
   30055    3.5185461e-01   0.000000e+00   0.000000e+00      8s
   30055    3.5185461e-01   0.000000e+00   0.000000e+00      8s

Root relaxation: objective 3.518546e-01, 30055 iterations, 4.03 seconds (13.95 work units)
Total elapsed time = 14.56s
Total elapsed time = 18.36s

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.35185    0  311    0.00000    0.35185      -     -   20s
H    0     0                       0.0000784    0.35185      -     -   20s
H    0     0                       0.0004617    0.35185      -     -   20s
     0     0    0.35185    0  497    0.00046    0.35185      -     -   22s
H    0     0                       0.0004617    0.35185      -     -   23s
     0     0    0.35185    0  497    0.00046    0.35185      -     -   23s
     0     0    0.35185    0  316    0.00046    0.35185      -     -   31s
     0     0    0.35185    0  316    0.00046    0.35185      -     -   32s
     0     0    0.35185    0  229    0.00046    0.35185      -     -   40s
H    0     0                       0.0611395    0.35185   475%     -   42s
     0     0    0.35185    0  188    0.06114    0.35185   475%     -   42s
     0     0    0.35185    0  149    0.06114    0.35185   475%     -   46s
     0     0    0.35185    0  181    0.06114    0.35185   475%     -   51s
H    0     0                       0.0611396    0.35185   475%     -   52s
     0     0    0.35185    0  295    0.06114    0.35185   475%     -   56s
H    0     0                       0.0611396    0.35185   475%     -   57s
     0     0    0.35185    0  295    0.06114    0.35185   475%     -   57s
     0     0    0.35185    0  263    0.06114    0.35185   475%     -   63s
     0     0    0.35185    0  470    0.06114    0.35185   475%     -   65s
     0     0    0.35185    0  181    0.06114    0.35185   475%     -   72s
     0     0    0.35185    0  179    0.06114    0.35185   475%     -   75s
H    0     0                       0.2377298    0.35185  48.0%     -   78s
     0     2    0.35185    0  179    0.23773    0.35185  48.0%     -   89s
     2     4    0.35185    1  527    0.23773    0.35185  48.0%   680   90s
     7     9    0.35185    4  365    0.23773    0.35185  48.0%   229   95s
    35    37    0.35185   22  543    0.23773    0.35185  48.0%  60.9  100s
    61    63    0.35185   40  313    0.23773    0.35185  48.0%   114  113s
    65    67    0.35185   42  999    0.23773    0.35185  48.0%   115  115s
    76    78    0.35185   50  294    0.23773    0.35185  48.0%   148  124s
    78    80    0.35185   51  251    0.23773    0.35185  48.0%   146  125s
H   81    81                       0.2377299    0.35185  48.0%   143  125s
    92    94    0.35185   60  337    0.23773    0.35185  48.0%   149  131s
H  104   104                       0.2377324    0.35185  48.0%   137  134s
   107   109    0.35185   70  148    0.23773    0.35185  48.0%   155  138s
   113   115    0.35185   75  610    0.23773    0.35185  48.0%   150  140s
   137   139    0.35185   90  112    0.23773    0.35185  48.0%   128  145s
*  161     2             107       0.3518546    0.35185  0.00%   115  149s

Cutting planes:
  Implied bound: 2
  MIR: 41
  StrongCG: 1
  Flow cover: 3
  Zero half: 4
  RLT: 2
  Relax-and-lift: 1

Explored 162 nodes (72616 simplex iterations) in 149.76 seconds (972.72 work units)
Thread count was 1 (of 64 available processors)

Solution count 10: 0.351855 0.237732 0.23773 ... 7.84337e-05
No other solutions better than 0.351855

Optimal solution found (tolerance 1.00e-04)
Best objective 3.518546075462e-01, best bound 3.518546075462e-01, gap 0.0000%
Tree policy:
if z <= 0.0:
    if x <= 0.0:
        if y <= 3.0:
            return '(right)'
        else:
            return '(down)'
    else:
        if x <= 0.0:
            if y <= 2.0:
                return '(up)'
            else:
                return '__random__'
        else:
            if y <= 0.0:
                if x <= 2.0:
                    if x <= 1.0:
                        return '(right)'
                    else:
                        return '(forward)'
                else:
                    return '__random__'
            else:
                return '__random__'
else:
    if z <= 1.0:
        if x <= 1.0:
            if y <= 0.0:
                if z <= 1.0:
                    if z <= 0.0:
                        return '__random__'
                    else:
                        if z <= 0.0:
                            return '(forward)'
                        else:
                            return '(right)'
                else:
                    return '(right)'
            else:
                if y <= 0.0:
                    return '(forward)'
                else:
                    return '(down)'
        else:
            if y <= 0.0:
                if x <= 2.0:
                    if x <= 1.0:
                        return '__random__'
                    else:
                        return '(right)'
                else:
                    if x <= 3.0:
                        return '(forward)'
                    else:
                        return '__random__'
            else:
                return '__random__'
    else:
        if z <= 2.0:
            if y <= 0.0:
                return '(forward)'
            else:
                if x <= 0.0:
                    return '(down)'
                else:
                    if y <= 2.0:
                        return '(backward)'
                    else:
                        return '(down)'
        else:
            if x <= 0.0:
                if z <= 4.0:
                    return '(right)'
                else:
                    return '__random__'
            else:
                if x <= 2.0:
                    if x <= 1.0:
                        if z <= 4.0:
                            if y <= 3.0:
                                return '(up)'
                            else:
                                return '(left)'
                        else:
                            return '__random__'
                    else:
                        if z <= 4.0:
                            if y <= 3.0:
                                return '(backward)'
                            else:
                                return '(up)'
                        else:
                            return '__random__'
                else:
                    if z <= 3.0:
                        if y <= 3.0:
                            return '(up)'
                        else:
                            return '(forward)'
                    else:
                        return '(right)'
Optimal decision tree (depth=8) value: 0.3518546075461676
Writing result files...
