Solving...
Starting with fixed depth 6
Set parameter Username
Academic license - for non-commercial use only - expires 2025-09-20
Warning for adding constraints: zero or small (< 1e-13) coefficients, ignored
Set parameter Threads to value 1
Set parameter TimeLimit to value 1200
Gurobi Optimizer version 10.0.0 build v10.0.0rc2 (linux64)

CPU model: AMD EPYC 9124 16-Core Processor, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 32 physical cores, 64 logical processors, using up to 1 threads

Optimize a model with 669757 rows, 39592 columns and 6103765 nonzeros
Model fingerprint: 0x97b5bed2
Variable types: 10201 continuous, 29391 integer (29391 binary)
Coefficient statistics:
  Matrix range     [1e-13, 1e+02]
  Objective range  [1e-07, 2e+01]
  Bounds range     [1e+00, 1e+02]
  RHS range        [1e+00, 6e+00]
Presolve removed 6489 rows and 504 columns (presolve time = 5s) ...
Presolve removed 6478 rows and 493 columns
Presolve time: 8.20s
Presolved: 663279 rows, 39099 columns, 5774033 nonzeros
Variable types: 10212 continuous, 28887 integer (28887 binary)
Found heuristic solution: objective -109.0153533
Root relaxation presolved: 39099 rows, 702378 columns, 5813132 nonzeros


Root simplex log...

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    2.5398381e+04   0.000000e+00   2.851099e+03     15s
    7365    2.1550038e+04   0.000000e+00   9.070455e+04     15s
   14582    5.8049055e+03   0.000000e+00   9.192747e+06     20s
   20957    1.0173773e+03   0.000000e+00   7.266518e+06     25s
   27222    9.6754113e+02   0.000000e+00   3.675689e+06     30s
   34166    9.6745499e+02   0.000000e+00   1.369747e+06     35s
   38998    9.6789763e+02   0.000000e+00   0.000000e+00     38s
   38998    9.6789763e+02   0.000000e+00   0.000000e+00     39s

Root relaxation: objective 9.678976e+02, 38998 iterations, 26.81 seconds (116.76 work units)
Total elapsed time = 41.89s

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  967.89763    0  466 -109.01535  967.89763   988%     -   42s
     0     0  967.89763    0  559 -109.01535  967.89763   988%     -   45s
H    0     0                    -104.8620823  967.89763  1023%     -   49s
     0     0  967.89763    0  559 -104.86208  967.89763  1023%     -   49s
     0     0  967.89763    0  387 -104.86208  967.89763  1023%     -   55s
H    0     0                     -94.4851033  967.89763  1124%     -   57s
     0     0  967.89763    0  397  -94.48510  967.89763  1124%     -   57s
     0     0  967.89763    0  407  -94.48510  967.89763  1124%     -   64s
H    0     0                     155.8047492  967.89763   521%     -   65s
H    0     0                     155.8047493  967.89763   521%     -   70s
     0     0  967.89763    0  430  155.80475  967.89763   521%     -   70s
     0     0  967.89763    0  397  155.80475  967.89763   521%     -   87s
H    0     0                     897.3140032  967.89763  7.87%     -   89s
     0     0  967.89763    0  397  897.31400  967.89763  7.87%     -   90s
     0     0  967.89763    0  304  897.31400  967.89763  7.87%     -  107s
H    0     0                     955.9219723  967.89763  1.25%     -  109s
H    0     0                     955.9219732  967.89763  1.25%     -  111s
     0     0  967.89763    0  488  955.92197  967.89763  1.25%     -  113s
     0     0  967.89763    0  419  955.92197  967.89763  1.25%     -  128s
     0     0  967.89763    0  345  955.92197  967.89763  1.25%     -  144s
     0     0  967.89763    0  345  955.92197  967.89763  1.25%     -  146s
     0     0  967.89763    0  309  955.92197  967.89763  1.25%     -  159s
     0     0  967.89763    0  309  955.92197  967.89763  1.25%     -  164s
     0     2  967.89763    0  309  955.92197  967.89763  1.25%     -  187s
     4     6  967.89763    3  320  955.92197  967.89763  1.25%   408  190s
     9    11  967.89763    7  437  955.92197  967.89763  1.25%   385  195s
    17    19  967.89763   12  409  955.92197  967.89763  1.25%   255  200s
    23    25  967.89763   17  386  955.92197  967.89763  1.25%   239  205s
    31    33  967.89763   22  586  955.92197  967.89763  1.25%   185  210s
    39    41  967.89763   29  480  955.92197  967.89763  1.25%   176  215s
    49    51  967.89763   35  469  955.92197  967.89763  1.25%   145  220s
    57    59  967.89763   39  372  955.92197  967.89763  1.25%   127  225s
    68    70  967.89763   45  244  955.92197  967.89763  1.25%   114  230s
    76    78  967.89763   51  272  955.92197  967.89763  1.25%   110  235s
    85    87  967.89763   58  140  955.92197  967.89763  1.25%   119  240s
   102    99  967.89763   70  101  955.92197  967.89763  1.25%   102  245s
   105   100  961.61653   73    5  955.92197  967.89763  1.25%   106  250s
H  108    99                     962.5735530  967.89763  0.55%   103  254s
   109   100  962.60111   75   54  962.57355  967.89763  0.55%   104  255s
*  111    98              76     962.5739992  967.89763  0.55%   102  256s
   126   113  967.89763   78   42  962.57400  967.89763  0.55%  93.3  260s
H  135   119                     965.3288549  967.89763  0.27%  89.2  263s
   144   130  967.89763   89   36  965.32885  967.89763  0.27%  85.8  265s
H  156   140                     965.3675657  967.89763  0.26%  99.1  270s
   175   160  967.89292  113   44  965.36757  967.89763  0.26%  90.1  275s
H  189   171                     966.3686557  967.89763  0.16%  85.6  280s
   208   188  967.89292  139  126  966.36866  967.89763  0.16%  81.5  285s
H  216   185                     966.9297567  967.89763  0.10%  80.5  288s
   226   187  967.89292  148   40  966.92976  967.89763  0.10%  79.5  290s
H  243   192                     966.9297571  967.89763  0.10%  77.6  294s
   243   194  967.89292  156   57  966.92976  967.89763  0.10%  77.7  295s
   264   197  967.57862  169   18  966.92976  967.89763  0.10%  77.0  300s
   265   196 infeasible  170       966.92976  967.89763  0.10%   193  311s
   284   197  967.35517   87   29  966.92976  967.89763  0.10%   183  315s
H  297   196                     966.9323367  967.89763  0.10%   175  317s
   312   197  967.35517  115   29  966.93234  967.89763  0.10%   166  320s
   338   197  967.35517  141   29  966.93234  967.89763  0.10%   154  325s
   367   197  967.35517  170   55  966.93234  967.89763  0.10%   142  330s
   376   202  967.89763   75  239  966.93234  967.89763  0.10%   142  335s
H  378   201                     966.9330415  967.89763  0.10%   141  337s
   383   207  967.89763   80   83  966.93304  967.89763  0.10%   140  340s
H  405   224                     967.6203348  967.89763  0.03%   133  343s
   412   233  967.89471  109  103  967.62033  967.89763  0.03%   131  345s
   414   231     cutoff  110       967.62033  967.89763  0.03%   176  350s
   423   232  967.89763   75   37  967.62033  967.89763  0.03%   195  355s
   459   261  967.89763  104   40  967.62033  967.89763  0.03%   181  360s
H  469   269                     967.6258377  967.89763  0.03%   177  361s
   480   281  967.89763  116   85  967.62584  967.89763  0.03%   175  365s
   495   280  967.89763  124   56  967.62584  967.89763  0.03%   174  370s
   511   285  967.89763   79  309  967.62584  967.89763  0.03%   172  457s

Explored 512 nodes (278095 simplex iterations) in 1200.06 seconds (2360.01 work units)
Thread count was 1 (of 64 available processors)

Solution count 10: 967.626 967.62 966.933 ... 962.574

Time limit reached
Best objective 9.676258377236e+02, best bound 9.678976270893e+02, gap 0.0281%
Tree policy:
if inventory <= 57.0:
    if inventory <= 23.0:
        if inventory <= 4.0:
            if inventory <= 2.0:
                if inventory <= 1.0:
                    if inventory <= 0.0:
                        return '(Buy_12)'
                    else:
                        return '(Buy_11)'
                else:
                    return '(Buy_9)'
            else:
                if inventory <= 3.0:
                    return '(Buy_8)'
                else:
                    return '(Buy_7)'
        else:
            if inventory <= 22.0:
                if inventory <= 6.0:
                    return '(Buy_6)'
                else:
                    if inventory <= 19.0:
                        return '(Buy_3)'
                    else:
                        return '(Buy_7)'
            else:
                if inventory <= 23.0:
                    return '__random__'
                else:
                    return '(Don't'
    else:
        if inventory <= 93.0:
            return '(Buy_27)'
        else:
            return '(Don't'
else:
    if inventory <= 63.0:
        if inventory <= 57.0:
            return '(Don't'
        else:
            if inventory <= 58.0:
                return '(Buy_31)'
            else:
                return '(Buy_13)'
    else:
        if inventory <= 80.0:
            if inventory <= 64.0:
                return '(Buy_1)'
            else:
                return '__random__'
        else:
            if inventory <= 100.0:
                if inventory <= 83.0:
                    return '(Don't'
                else:
                    return '__random__'
            else:
                return '(Don't'
Optimal decision tree (depth=6) value: 967.6258377235661
Writing result files...
