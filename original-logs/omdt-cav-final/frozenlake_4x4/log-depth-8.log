Solving...
Starting with fixed depth 8
Set parameter Username
Academic license - for non-commercial use only - expires 2025-09-20
Set parameter Threads to value 1
Set parameter TimeLimit to value 1200
Gurobi Optimizer version 10.0.0 build v10.0.0rc2 (linux64)

CPU model: AMD EPYC 9124 16-Core Processor, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 32 physical cores, 64 logical processors, using up to 1 threads

Optimize a model with 25183 rows, 7560 columns and 224896 nonzeros
Model fingerprint: 0xa0c4b8e1
Variable types: 80 continuous, 7480 integer (7480 binary)
Coefficient statistics:
  Matrix range     [1e-02, 1e+02]
  Objective range  [2e-01, 3e-01]
  Bounds range     [1e+00, 1e+02]
  RHS range        [1e+00, 8e+00]
Presolve removed 2040 rows and 1275 columns
Presolve time: 0.19s
Presolved: 23143 rows, 6285 columns, 209301 nonzeros
Variable types: 80 continuous, 6205 integer (6205 binary)
Found heuristic solution: objective 0.0123561

Root relaxation: objective 5.420259e-01, 434 iterations, 0.02 seconds (0.02 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.54203    0   53    0.01236    0.54203  4287%     -    0s
     0     0    0.54203    0   36    0.01236    0.54203  4287%     -    0s
H    0     0                       0.0669973    0.54203   709%     -    0s
     0     0    0.54203    0   34    0.06700    0.54203   709%     -    0s
     0     0    0.54203    0   33    0.06700    0.54203   709%     -    0s
     0     0    0.54203    0   31    0.06700    0.54203   709%     -    0s
H    0     0                       0.0866180    0.54203   526%     -    0s
H    0     0                       0.0931534    0.54203   482%     -    0s
     0     0    0.54203    0   40    0.09315    0.54203   482%     -    1s
     0     0    0.54203    0   56    0.09315    0.54203   482%     -    1s
H    0     0                       0.1804856    0.54203   200%     -    1s
     0     0    0.54203    0   56    0.18049    0.54203   200%     -    1s
     0     0    0.54203    0   46    0.18049    0.54203   200%     -    1s
     0     0    0.54203    0   44    0.18049    0.54203   200%     -    1s
     0     0    0.54203    0   44    0.18049    0.54203   200%     -    1s
H    0     0                       0.1804857    0.54203   200%     -    1s
H    0     0                       0.3651665    0.54203  48.4%     -    2s
H    0     0                       0.3651666    0.54203  48.4%     -    2s
     0     2    0.54203    0   44    0.36517    0.54203  48.4%     -    2s
H   54    51                       0.4538331    0.54203  19.4%  29.0    3s
H   81    62                       0.5324801    0.54203  1.79%  24.8    3s
H  104    85                       0.5324801    0.54203  1.79%  23.8    3s
H  108    89                       0.5324808    0.54203  1.79%  23.9    3s
*  151     4              85       0.5420259    0.54203  0.00%  20.6    3s

Cutting planes:
  Gomory: 11
  Implied bound: 1
  MIR: 5
  Zero half: 7
  Relax-and-lift: 1

Explored 152 nodes (8375 simplex iterations) in 3.87 seconds (7.84 work units)
Thread count was 1 (of 64 available processors)

Solution count 10: 0.542026 0.532481 0.53248 ... 0.0931534
No other solutions better than 0.542026

Optimal solution found (tolerance 1.00e-04)
Best objective 5.420259305407e-01, best bound 5.420259305407e-01, gap 0.0000%
Tree policy:
if X <= 1.0:
    if Y <= 3.0:
        if Y <= 1.0:
            if X <= 0.0:
                return '(Left)'
            else:
                return '(Up)'
        else:
            if Y <= 2.0:
                if X <= 0.0:
                    if Y <= 1.0:
                        return '(Left)'
                    else:
                        return '(Up)'
                else:
                    return '(Down)'
            else:
                return '(Right)'
    else:
        return '(Left)'
else:
    if Y <= 3.0:
        if Y <= 0.0:
            if X <= 2.0:
                return '(Up)'
            else:
                if X <= 2.0:
                    if Y <= 2.0:
                        return '__random__'
                    else:
                        return '(Left)'
                else:
                    if Y <= 1.0:
                        return '(Up)'
                    else:
                        if X <= 2.0:
                            return '(Down)'
                        else:
                            return '__random__'
        else:
            if X <= 1.0:
                return '__random__'
            else:
                if Y <= 0.0:
                    return '__random__'
                else:
                    if Y <= 0.0:
                        return '(Left)'
                    else:
                        if Y <= 2.0:
                            return '(Left)'
                        else:
                            if Y <= 2.0:
                                return '(Left)'
                            else:
                                return '(Down)'
    else:
        return '(Left)'
Optimal decision tree (depth=8) value: 0.5420259305406872
Writing result files...
