Solving...
Starting with fixed depth 7
Set parameter Username
Academic license - for non-commercial use only - expires 2025-09-20
Set parameter Threads to value 1
Set parameter TimeLimit to value 1200
Gurobi Optimizer version 10.0.0 build v10.0.0rc2 (linux64)

CPU model: AMD EPYC 9124 16-Core Processor, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 32 physical cores, 64 logical processors, using up to 1 threads

Optimize a model with 12639 rows, 3848 columns and 102400 nonzeros
Model fingerprint: 0xe79541ed
Variable types: 80 continuous, 3768 integer (3768 binary)
Coefficient statistics:
  Matrix range     [1e-02, 1e+02]
  Objective range  [2e-01, 3e-01]
  Bounds range     [1e+00, 1e+02]
  RHS range        [1e+00, 7e+00]
Presolve removed 1016 rows and 635 columns
Presolve time: 0.09s
Presolved: 11623 rows, 3213 columns, 95253 nonzeros
Variable types: 80 continuous, 3133 integer (3133 binary)
Found heuristic solution: objective 0.0123561

Root relaxation: objective 5.420259e-01, 312 iterations, 0.01 seconds (0.01 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.54203    0   49    0.01236    0.54203  4287%     -    0s
     0     0    0.54203    0   45    0.01236    0.54203  4287%     -    0s
H    0     0                       0.0390418    0.54203  1288%     -    0s
     0     0    0.54203    0   47    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   33    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   31    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   33    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   35    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   44    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   41    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   31    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   62    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   50    0.03904    0.54203  1288%     -    0s
     0     0    0.54203    0   50    0.03904    0.54203  1288%     -    0s
H    0     0                       0.1103983    0.54203   391%     -    0s
     0     2    0.54203    0   50    0.11040    0.54203   391%     -    1s
H   27    23                       0.1235245    0.54203   339%  33.7    1s
H   54    49                       0.1235246    0.54203   339%  23.3    1s
H   81    17                       0.1321365    0.54203   310%  19.3    1s
H  108    36                       0.1344152    0.54203   303%  18.6    1s
*  133    36              39       0.1678867    0.54203   223%  17.0    1s
*  191    78              58       0.1715237    0.54203   216%  16.0    2s
H  235   113                       0.1715237    0.54203   216%  14.8    2s
H  243   115                       0.3651665    0.54203  48.4%  15.0    2s
*  246   114              58       0.4446950    0.54203  21.9%  14.9    2s
H  324     4                       0.5420261    0.54203  0.00%  15.0    2s

Cutting planes:
  Gomory: 8
  Implied bound: 1
  MIR: 13
  Flow cover: 2
  Zero half: 7
  Relax-and-lift: 1

Explored 325 nodes (8775 simplex iterations) in 2.39 seconds (4.08 work units)
Thread count was 1 (of 64 available processors)

Solution count 10: 0.542026 0.444695 0.365167 ... 0.123525
No other solutions better than 0.542026

Optimal solution found (tolerance 1.00e-04)
Best objective 5.420260988761e-01, best bound 5.420260988761e-01, gap 0.0000%
Tree policy:
if X <= 0.0:
    if Y <= 3.0:
        if Y <= 2.0:
            if Y <= 1.0:
                return '(Left)'
            else:
                return '(Up)'
        else:
            return '(Left)'
    else:
        return '(Left)'
else:
    if X <= 1.0:
        if Y <= 3.0:
            if Y <= 2.0:
                if Y <= 1.0:
                    return '(Up)'
                else:
                    if X <= 0.0:
                        return '(Up)'
                    else:
                        return '(Down)'
            else:
                return '(Right)'
        else:
            return '(Left)'
    else:
        if Y <= 0.0:
            if Y <= 1.0:
                return '(Up)'
            else:
                return '__random__'
        else:
            if Y <= 2.0:
                return '(Left)'
            else:
                if Y <= 3.0:
                    if X <= 2.0:
                        return '(Down)'
                    else:
                        return '__random__'
                else:
                    if Y <= 3.0:
                        return '(Left)'
                    else:
                        return '__random__'
Optimal decision tree (depth=7) value: 0.5420260988761099
Writing result files...
