Solving...
Starting with fixed depth 8
Set parameter Username
Academic license - for non-commercial use only - expires 2025-09-20
Set parameter Threads to value 1
Set parameter TimeLimit to value 1200
Gurobi Optimizer version 10.0.0 build v10.0.0rc2 (linux64)

CPU model: AMD EPYC 9124 16-Core Processor, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 32 physical cores, 64 logical processors, using up to 1 threads

Optimize a model with 99199 rows, 22320 columns and 957132 nonzeros
Model fingerprint: 0xb41d216e
Variable types: 320 continuous, 22000 integer (22000 binary)
Coefficient statistics:
  Matrix range     [1e-02, 1e+02]
  Objective range  [2e-01, 3e-01]
  Bounds range     [1e+00, 1e+02]
  RHS range        [1e+00, 8e+00]
Presolve removed 2040 rows and 1275 columns
Presolve time: 1.00s
Presolved: 97159 rows, 21045 columns, 939497 nonzeros
Variable types: 320 continuous, 20725 integer (20725 binary)
Found heuristic solution: objective 0.0010996
Root relaxation presolved: 21045 rows, 118204 columns, 960542 nonzeros


Root relaxation: objective 4.146404e-01, 19216 iterations, 1.97 seconds (6.23 work units)
Total elapsed time = 5.83s

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.41464    0  157    0.00110    0.41464      -     -    6s
     0     0    0.41464    0  370    0.00110    0.41464      -     -    7s
     0     0    0.41464    0  205    0.00110    0.41464      -     -   10s
H    0     0                       0.3870226    0.41464  7.14%     -   10s
     0     0    0.41464    0  211    0.38702    0.41464  7.14%     -   11s
     0     0    0.41464    0  107    0.38702    0.41464  7.14%     -   13s
     0     0    0.41464    0  244    0.38702    0.41464  7.14%     -   15s
     0     0    0.41464    0  188    0.38702    0.41464  7.14%     -   17s
     0     0    0.41464    0  202    0.38702    0.41464  7.14%     -   18s
     0     0    0.41464    0   98    0.38702    0.41464  7.14%     -   19s
     0     0    0.41464    0   96    0.38702    0.41464  7.14%     -   20s
     0     2    0.41464    0   95    0.38702    0.41464  7.14%     -   25s
    44    46    0.41464   30  140    0.38702    0.41464  7.14%  71.8   30s
H   81    76                       0.3891732    0.41464  6.54%  64.9   34s
   100    90    0.41464    5  222    0.38917    0.41464  6.54%  54.2   35s
   138   128    0.41464   29  150    0.38917    0.41464  6.54%  55.4   40s
   184   174    0.41464   58  171    0.38917    0.41464  6.54%  54.4   45s
H  216   203                       0.3891736    0.41464  6.54%  54.8   49s
   219   208    0.41464   84  260    0.38917    0.41464  6.54%  55.4   50s
   327   304    0.40073  153  151    0.38917    0.41464  6.54%  42.0   55s
H  352   316                       0.3892934    0.41464  6.51%  44.5   57s
   376   342    0.41464   28  248    0.38929    0.41464  6.51%  43.4   60s
   410   375    0.41464   51  162    0.38929    0.41464  6.51%  46.0   65s
H  442   405                       0.3959195    0.41464  4.73%  43.2   66s
   511   447    0.41464   37   96    0.39592    0.41464  4.73%  39.1   73s
   513   448    0.41464   66  105    0.39592    0.41464  4.73%  39.0   80s
   516   450    0.41464   53  112    0.39592    0.41464  4.73%  38.7   88s
   517   451    0.41464   10  165    0.39592    0.41464  4.73%  38.7   91s
   519   452    0.41348   96  142    0.39592    0.41464  4.73%  38.5   95s
   522   454    0.41177   99  244    0.39592    0.41464  4.73%  38.3  100s
   525   456    0.41348  125  124    0.39592    0.41464  4.73%  38.1  106s
   528   458    0.41348   94  127    0.39592    0.41464  4.73%  37.9  113s
   530   460    0.41389   78  128    0.39592    0.41464  4.73%  37.7  117s
   531   460    0.41464   19  128    0.39592    0.41464  4.73%  37.6  126s
   533   464    0.41464   16  263    0.39592    0.41464  4.73%   128  131s
   553   477    0.41464   26  205    0.39592    0.41464  4.73%   128  135s
H  591   474                       0.3959195    0.41464  4.73%   121  140s
H  613   467                       0.3959198    0.41464  4.73%   117  144s
   619   473    0.41464   59  258    0.39592    0.41464  4.73%   117  145s
H  640   464                       0.3959198    0.41464  4.73%   116  149s
   641   467    0.41464   70  318    0.39592    0.41464  4.73%   116  150s
H  667   461                       0.3959202    0.41464  4.73%   112  154s
   679   468    0.40685   89  837    0.39592    0.41464  4.73%   111  155s
   713   487    0.40685  107  431    0.39592    0.41464  4.73%   106  160s
H  748   477                       0.3985877    0.41464  4.03%   103  165s
   758   485    0.41464   28  158    0.39859    0.41464  4.03%   105  170s
H  775   476                       0.3996483    0.41464  3.75%   104  173s
   785   485    0.41464   42  315    0.39965    0.41464  3.75%   103  175s
H  792   469                       0.3996483    0.41464  3.75%   102  176s
H  802   460                       0.3996524    0.41464  3.75%   102  178s
   820   473    0.41464   59  173    0.39965    0.41464  3.75%   101  180s
H  829   459                       0.3996524    0.41464  3.75%   100  182s
   850   473    0.41464   75  210    0.39965    0.41464  3.75%   100  185s
H  856   461                       0.3996526    0.41464  3.75%   100  187s
   882   476    0.41464   91  393    0.39965    0.41464  3.75%  97.4  191s
H  883   461                       0.3996526    0.41464  3.75%  97.3  192s
   913   468    0.41464   36  319    0.39965    0.41464  3.75%  94.8  196s
H  940   470                       0.3999851    0.41464  3.66%  92.9  198s
   961   486    0.41464   60  128    0.39999    0.41464  3.66%  91.1  200s
H  967   476                       0.3999852    0.41464  3.66%  90.7  201s
   991   494    0.41464   75  193    0.39999    0.41464  3.66%  91.3  205s
H 1021   499                       0.3999853    0.41464  3.66%  89.1  208s
  1038   506    0.41464   99  470    0.39999    0.41464  3.66%  88.4  210s
  1091   523    0.40869  127  800    0.39999    0.41464  3.66%  85.0  215s
  1135   542    0.41464   55  109    0.39999    0.41464  3.66%  84.6  220s
H 1156   542                       0.4002642    0.41464  3.59%  83.2  221s
H 1183   568                       0.4002708    0.41464  3.59%  82.3  224s
  1185   572    0.41464   75  148    0.40027    0.41464  3.59%  82.8  225s
  1235   618    0.41464   95  154    0.40027    0.41464  3.59%  84.0  230s
  1244   627    0.41464   95  175    0.40027    0.41464  3.59%  89.0  235s
  1314   676    0.41450  134  227    0.40027    0.41464  3.59%  85.5  240s
H 1339   689                       0.4011325    0.41464  3.37%  84.5  241s
  1402   729    0.41458   81  266    0.40113    0.41464  3.37%  82.3  245s
H 1453   778                       0.4014030    0.41464  3.30%  80.2  247s
H 1480   743                       0.4074114    0.41464  1.77%  79.2  249s
H 1495   758                       0.4074520    0.41464  1.76%  78.6  250s
  1588   828    0.41464   65  115    0.40745    0.41464  1.76%  75.9  255s
H 1625   857                       0.4074893    0.41464  1.75%  77.6  259s
  1627   861    0.41464   82  304    0.40749    0.41464  1.75%  77.5  260s
H 1677   894                       0.4084103    0.41464  1.53%  76.3  263s
H 1703   919                       0.4085618    0.41464  1.49%  75.3  264s
H 1729   934                       0.4105581    0.41464  0.99%  74.3  265s
H 1755   834                       0.4129733    0.41464  0.40%  73.6  266s
  1835   871    0.41464  125  210    0.41297    0.41464  0.40%  72.8  270s
H 1858   875                       0.4137559    0.41464  0.21%  72.7  271s
H 1885   887                       0.4140354    0.41464  0.15%  72.9  274s
H 1885   885                       0.4140960    0.41464  0.13%  72.9  275s
H 1964   937                       0.4144776    0.41464  0.04%  71.9  280s
  1988   943    0.41464   90  411    0.41448    0.41464  0.04%  71.4  285s
H 1990   943                       0.4144893    0.41464  0.04%  71.3  285s
  2011   962    0.41450  110  441    0.41449    0.41464  0.04%  71.0  290s
  2073  1018    0.41450  168  151    0.41449    0.41464  0.04%  69.3  295s
H 2075   904                       0.4145027    0.41464  0.03%  69.2  295s
H 2094   750                       0.4145787    0.41464  0.01%  69.0  296s
  2121   763    0.41464   78  606    0.41458    0.41464  0.01%  69.4  300s
H 2130   770                       0.4145787    0.41464  0.01%  69.3  301s
H 2158   794                       0.4145787    0.41464  0.01%  69.2  303s
H 2172   808                       0.4145787    0.41464  0.01%  68.8  304s
  2181   819    0.41464  135  110    0.41458    0.41464  0.01%  68.8  305s
H 2199     3                       0.4146404    0.41464  0.00%  68.4  306s

Cutting planes:
  Gomory: 2
  Lift-and-project: 16
  MIR: 15
  Flow cover: 22
  Zero half: 24
  RLT: 1

Explored 2200 nodes (185988 simplex iterations) in 306.57 seconds (1045.75 work units)
Thread count was 1 (of 64 available processors)

Solution count 10: 0.41464 0.414579 0.414579 ... 0.414035
No other solutions better than 0.41464

Optimal solution found (tolerance 1.00e-04)
Best objective 4.146403591163e-01, best bound 4.146403591163e-01, gap 0.0000%
Tree policy:
if X <= 3.0:
    if Y <= 5.0:
        if Y <= 1.0:
            if X <= 1.0:
                if Y <= 0.0:
                    if X <= 0.0:
                        return '(Up)'
                    else:
                        return '(Right)'
                else:
                    if X <= 5.0:
                        return '(Up)'
                    else:
                        return '(Left)'
            else:
                if X <= 3.0:
                    if Y <= 0.0:
                        return '(Right)'
                    else:
                        return '(Up)'
                else:
                    return '(Up)'
        else:
            if Y <= 3.0:
                if X <= 1.0:
                    return '(Up)'
                else:
                    if Y <= 2.0:
                        return '(Left)'
                    else:
                        if Y <= 2.0:
                            return '(Left)'
                        else:
                            return '(Up)'
            else:
                if X <= 4.0:
                    if X <= 2.0:
                        return '(Left)'
                    else:
                        return '(Down)'
                else:
                    return '(Left)'
    else:
        if Y <= 6.0:
            if Y <= 5.0:
                if X <= 2.0:
                    return '__random__'
                else:
                    return '(Left)'
            else:
                if X <= 0.0:
                    return '(Left)'
                else:
                    if X <= 2.0:
                        return '(Down)'
                    else:
                        return '(Left)'
        else:
            if Y <= 6.0:
                if Y <= 6.0:
                    return '(Right)'
                else:
                    return '(Left)'
            else:
                if X <= 0.0:
                    return '(Left)'
                else:
                    if X <= 1.0:
                        return '(Down)'
                    else:
                        return '(Left)'
else:
    if X <= 4.0:
        if Y <= 0.0:
            return '(Right)'
        else:
            if Y <= 2.0:
                if Y <= 1.0:
                    return '(Up)'
                else:
                    return '(Right)'
            else:
                if Y <= 4.0:
                    if Y <= 3.0:
                        return '(Left)'
                    else:
                        return '(Right)'
                else:
                    if Y <= 7.0:
                        if X <= 3.0:
                            return '(Left)'
                        else:
                            if Y <= 6.0:
                                return '(Up)'
                            else:
                                return '__random__'
                    else:
                        return '(Left)'
    else:
        if Y <= 1.0:
            if X <= 6.0:
                if X <= 4.0:
                    return '(Left)'
                else:
                    if Y <= 0.0:
                        return '(Right)'
                    else:
                        if Y <= 0.0:
                            return '(Right)'
                        else:
                            if Y <= 0.0:
                                return '(Down)'
                            else:
                                return '(Right)'
            else:
                if Y <= 0.0:
                    return '(Right)'
                else:
                    if Y <= 0.0:
                        return '__random__'
                    else:
                        return '(Down)'
        else:
            if X <= 6.0:
                if Y <= 4.0:
                    if Y <= 3.0:
                        if X <= 5.0:
                            return '(Up)'
                        else:
                            return '(Right)'
                    else:
                        if X <= 5.0:
                            return '(Down)'
                        else:
                            return '(Up)'
                else:
                    if Y <= 4.0:
                        return '(Up)'
                    else:
                        if Y <= 6.0:
                            if X <= 5.0:
                                return '(Left)'
                            else:
                                return '(Down)'
                        else:
                            if X <= 5.0:
                                return '(Right)'
                            else:
                                return '(Down)'
            else:
                if Y <= 7.0:
                    if Y <= 2.0:
                        return '(Down)'
                    else:
                        return '(Right)'
                else:
                    if Y <= 7.0:
                        return '(Up)'
                    else:
                        return '(Right)'
Optimal decision tree (depth=8) value: 0.41464035911626884
Writing result files...
