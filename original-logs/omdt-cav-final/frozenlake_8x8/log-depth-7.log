Solving...
Starting with fixed depth 7
Set parameter Username
Academic license - for non-commercial use only - expires 2025-09-20
Set parameter Threads to value 1
Set parameter TimeLimit to value 1200
Gurobi Optimizer version 10.0.0 build v10.0.0rc2 (linux64)

CPU model: AMD EPYC 9124 16-Core Processor, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 32 physical cores, 64 logical processors, using up to 1 threads

Optimize a model with 49791 rows, 11440 columns and 438348 nonzeros
Model fingerprint: 0x071d8e6f
Variable types: 320 continuous, 11120 integer (11120 binary)
Coefficient statistics:
  Matrix range     [1e-02, 1e+02]
  Objective range  [2e-01, 3e-01]
  Bounds range     [1e+00, 1e+02]
  RHS range        [1e+00, 7e+00]
Presolve removed 1016 rows and 635 columns
Presolve time: 0.45s
Presolved: 48775 rows, 10805 columns, 430185 nonzeros
Variable types: 320 continuous, 10485 integer (10485 binary)
Found heuristic solution: objective 0.0010996
Root relaxation presolved: 48775 rows, 10805 columns, 430185 nonzeros


Root relaxation: objective 4.146404e-01, 1190 iterations, 0.24 seconds (0.69 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.41464    0  132    0.00110    0.41464      -     -    1s
     0     0    0.41464    0  282    0.00110    0.41464      -     -    1s
H    0     0                       0.0064111    0.41464  6368%     -    1s
     0     0    0.41464    0   76    0.00641    0.41464  6368%     -    2s
     0     0    0.41464    0   76    0.00641    0.41464  6368%     -    2s
     0     0    0.41464    0  116    0.00641    0.41464  6368%     -    2s
H    0     0                       0.0071239    0.41464  5720%     -    3s
     0     0    0.41464    0  116    0.00712    0.41464  5720%     -    3s
     0     0    0.41464    0  201    0.00712    0.41464  5720%     -    3s
H    0     0                       0.1843560    0.41464   125%     -    3s
     0     0    0.41464    0   77    0.18436    0.41464   125%     -    4s
     0     0    0.41464    0   77    0.18436    0.41464   125%     -    4s
     0     0    0.41464    0  180    0.18436    0.41464   125%     -    5s
     0     0    0.41464    0   68    0.18436    0.41464   125%     -    5s
H    0     0                       0.1843560    0.41464   125%     -    6s
     0     0    0.41464    0   68    0.18436    0.41464   125%     -    6s
     0     0    0.41464    0   68    0.18436    0.41464   125%     -    7s
H    0     0                       0.1843561    0.41464   125%     -    8s
H    0     0                       0.1843561    0.41464   125%     -    8s
     0     2    0.41464    0   68    0.18436    0.41464   125%     -    9s
    12    14    0.41464    7  116    0.18436    0.41464   125%   124   10s
H   52    52                       0.1843561    0.41464   125%   108   11s
   124   125    0.41425   77  191    0.18436    0.41464   125%  81.1   15s
   221   205    0.41464   47  310    0.18436    0.41464   125%  81.8   20s
   375   342    0.41464   43   81    0.18436    0.41464   125%  80.5   25s
*  503   403              38       0.3870226    0.41464  7.14%  87.7   29s
   511   402    0.41464   34   68    0.38702    0.41464  7.14%  86.9   30s
   516   405    0.41464   27  244    0.38702    0.41464  7.14%  86.1   36s
   521   409    0.41464   13  170    0.38702    0.41464  7.14%  85.2   40s
   526   412    0.41464   34  160    0.38702    0.41464  7.14%  84.4   45s
H  527   392                       0.3870227    0.41464  7.14%  84.3   47s
   532   395    0.41464   17  106    0.38702    0.41464  7.14%  83.5   51s
   540   400    0.41464   16   85    0.38702    0.41464  7.14%   172   55s
   574   421    0.41464   33   77    0.38702    0.41464  7.14%   174   60s
   634   458    0.41464   63  187    0.38702    0.41464  7.14%   174   65s
H  690   464                       0.3870228    0.41464  7.14%   165   68s
   729   481    0.39271  112  490    0.38702    0.41464  7.14%   158   70s
   860   564    0.38824  178  195    0.38702    0.41464  7.14%   137   75s
   993   631    0.41464   40  168    0.38702    0.41464  7.14%   121   80s
H 1075   662                       0.3870229    0.41464  7.14%   119   84s
  1078   666    0.41464   83  171    0.38702    0.41464  7.14%   122   85s
  1185   723    0.39705  138  277    0.38702    0.41464  7.14%   116   90s
H 1264   625                       0.3891360    0.41464  6.55%   111   92s
H 1315   637                       0.3892109    0.41464  6.53%   108   93s
H 1341   291                       0.3984694    0.41464  4.06%   106   95s
H 1393   289                       0.3988230    0.41464  3.97%   107   98s
H 1419   301                       0.4079634    0.41464  1.64%   107   99s
  1428   312    0.41464   63  116    0.40796    0.41464  1.64%   108  100s
H 1445   327                       0.4085260    0.41464  1.50%   108  101s
  1488   372    0.41464   93  241    0.40853    0.41464  1.50%   112  105s
H 1497   375                       0.4119880    0.41464  0.64%   113  106s
H 1523   401                       0.4120439    0.41464  0.63%   111  107s
H 1540   408                       0.4140960    0.41464  0.13%   110  108s
  1569   437 infeasible  133         0.41410    0.41464  0.13%   109  110s
  1653   503    0.41464  175  309    0.41410    0.41464  0.13%   104  115s
  1760   590    0.41464   43  102    0.41410    0.41464  0.13%   100  120s
H 1809   635                       0.4144312    0.41464  0.05%   102  124s
  1826   653    0.41450   74  291    0.41443    0.41464  0.05%   101  125s
H 1920   744                       0.4144313    0.41464  0.05%   100  128s
H 1947   771                       0.4144315    0.41464  0.05%  98.9  129s
  1957   783    0.41450  118  322    0.41443    0.41464  0.05%  98.5  130s
H 1974   797                       0.4144754    0.41464  0.04%  98.0  131s
H 1991   814                       0.4144754    0.41464  0.04%  97.3  131s
H 2001   824                       0.4144755    0.41464  0.04%  97.0  132s
H 2017   645                       0.4145058    0.41464  0.03%  96.6  133s
  2042   653    0.41464   43  113    0.41451    0.41464  0.03%  98.3  135s
H 2082   691                       0.4145060    0.41464  0.03%  98.1  137s
  2122   733    0.41458   77  289    0.41451    0.41464  0.03%  97.2  140s
H 2136   675                       0.4145787    0.41464  0.01%  96.8  141s
H 2147   678                       0.4145787    0.41464  0.01%  96.4  142s
H 2163   694                       0.4145787    0.41464  0.01%  96.0  142s
  2177   709    0.41464   33  184    0.41458    0.41464  0.01%  99.1  145s
H 2190     3                       0.4146404    0.41464  0.00%   100  146s

Cutting planes:
  Gomory: 3
  Lift-and-project: 11
  Implied bound: 5
  MIR: 18
  Flow cover: 16
  Zero half: 9
  RLT: 1

Explored 2191 nodes (229072 simplex iterations) in 146.91 seconds (426.03 work units)
Thread count was 1 (of 64 available processors)

Solution count 10: 0.41464 0.414579 0.414579 ... 0.414432
No other solutions better than 0.41464

Optimal solution found (tolerance 1.00e-04)
Best objective 4.146403591163e-01, best bound 4.146403591163e-01, gap 0.0000%
Tree policy:
if X <= 1.0:
    if Y <= 6.0:
        if X <= 0.0:
            if Y <= 3.0:
                return '(Up)'
            else:
                return '(Left)'
        else:
            if Y <= 0.0:
                if Y <= 2.0:
                    return '(Right)'
                else:
                    if Y <= 2.0:
                        return '(Down)'
                    else:
                        return '(Up)'
            else:
                if Y <= 2.0:
                    return '(Up)'
                else:
                    if Y <= 3.0:
                        return '(Up)'
                    else:
                        return '(Left)'
    else:
        if Y <= 1.0:
            return '(Left)'
        else:
            if Y <= 1.0:
                return '(Left)'
            else:
                if X <= 0.0:
                    return '(Left)'
                else:
                    return '(Down)'
else:
    if X <= 5.0:
        if Y <= 2.0:
            if Y <= 1.0:
                if Y <= 0.0:
                    return '(Right)'
                else:
                    if X <= 4.0:
                        return '(Up)'
                    else:
                        return '(Right)'
            else:
                if Y <= 1.0:
                    return '(Left)'
                else:
                    if X <= 3.0:
                        return '(Left)'
                    else:
                        if X <= 4.0:
                            return '(Right)'
                        else:
                            return '(Up)'
        else:
            if Y <= 4.0:
                if Y <= 3.0:
                    if X <= 3.0:
                        return '(Up)'
                    else:
                        return '(Left)'
                else:
                    if X <= 4.0:
                        return '(Right)'
                    else:
                        return '(Down)'
            else:
                if Y <= 5.0:
                    if X <= 4.0:
                        if X <= 3.0:
                            return '(Down)'
                        else:
                            return '(Up)'
                    else:
                        if Y <= 4.0:
                            return '(Down)'
                        else:
                            return '(Left)'
                else:
                    if Y <= 6.0:
                        if X <= 2.0:
                            return '(Down)'
                        else:
                            return '(Left)'
                    else:
                        if X <= 4.0:
                            return '(Left)'
                        else:
                            return '(Right)'
    else:
        if Y <= 6.0:
            if Y <= 2.0:
                if Y <= 0.0:
                    return '(Right)'
                else:
                    if X <= 6.0:
                        return '(Right)'
                    else:
                        return '(Down)'
            else:
                if X <= 6.0:
                    if Y <= 3.0:
                        if Y <= 2.0:
                            return '(Down)'
                        else:
                            return '(Right)'
                    else:
                        if Y <= 4.0:
                            return '(Up)'
                        else:
                            return '(Right)'
                else:
                    if Y <= 2.0:
                        return '(Left)'
                    else:
                        return '(Right)'
        else:
            if Y <= 6.0:
                if Y <= 4.0:
                    return '(Right)'
                else:
                    return '(Left)'
            else:
                if Y <= 6.0:
                    return '(Right)'
                else:
                    if Y <= 7.0:
                        return '(Down)'
                    else:
                        return '(Right)'
Optimal decision tree (depth=7) value: 0.4146403591162691
Writing result files...
