Solving...
Starting with fixed depth 6
Set parameter Username
Academic license - for non-commercial use only - expires 2025-09-20
Set parameter Threads to value 1
Set parameter TimeLimit to value 1200
Gurobi Optimizer version 10.0.0 build v10.0.0rc2 (linux64)

CPU model: AMD EPYC 9124 16-Core Processor, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 32 physical cores, 64 logical processors, using up to 1 threads

Optimize a model with 3991777 rows, 397516 columns and 58119444 nonzeros
Model fingerprint: 0x058a4abe
Variable types: 57316 continuous, 340200 integer (340200 binary)
Coefficient statistics:
  Matrix range     [1e-02, 1e+02]
  Objective range  [3e-01, 1e+00]
  Bounds range     [1e+00, 1e+02]
  RHS range        [1e+00, 6e+00]
Presolve removed 1890 rows and 756 columns (presolve time = 5s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 10s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 15s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 20s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 27s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 30s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 35s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 40s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 45s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 50s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 56s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 60s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 66s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 70s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 75s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 81s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 85s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 90s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 96s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 101s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 106s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 110s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 115s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 120s) ...
Presolve removed 1890 rows and 756 columns (presolve time = 125s) ...
Presolve removed 1890 rows and 756 columns
Presolve time: 129.09s
Presolved: 3989887 rows, 396760 columns, 42127335 nonzeros
Variable types: 57316 continuous, 339444 integer (339444 binary)
Found heuristic solution: objective -78.2581615
Root relaxation presolved: 396760 rows, 4386647 columns, 42524095 nonzeros


Root simplex log...

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   0.000000e+00   3.284900e+04    167s
  125683   -6.9971164e+01   0.000000e+00   7.754180e+00    170s
  261111   -6.9971164e+01   0.000000e+00   7.754180e+00    178s
  263791   -6.9971164e+01   0.000000e+00   7.754180e+00    182s
  266141   -7.0044947e+01   0.000000e+00   0.000000e+00    186s
  266141   -7.0044947e+01   0.000000e+00   0.000000e+00    187s

Root relaxation: objective -7.004495e+01, 266141 iterations, 41.55 seconds (139.41 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  -70.04495    0 4560  -78.25816  -70.04495  10.5%     -  244s
H    0     0                     -78.2579889  -70.04495  10.5%     -  256s
H    0     0                     -78.0055259  -70.04495  10.2%     -  265s
     0     0  -70.04495    0 4178  -78.00553  -70.04495  10.2%     -  316s
H    0     0                     -77.7793822  -70.04495  9.94%     -  342s
     0     0  -70.04495    0 4183  -77.77938  -70.04495  9.94%     -  361s
     0     0  -70.04495    0 4947  -77.77938  -70.04495  9.94%     -  524s
H    0     0                     -75.5547026  -70.04495  7.29%     -  541s
     0     0  -70.04495    0 4947  -75.55470  -70.04495  7.29%     -  565s
     0     0  -70.04495    0 10766  -75.55470  -70.04495  7.29%     -  695s
H    0     0                     -75.5546300  -70.04495  7.29%     -  719s
     0     0  -70.04495    0 10864  -75.55463  -70.04495  7.29%     -  743s
     0     0  -70.04495    0 11832  -75.55463  -70.04495  7.29%     -  870s
H    0     0                     -75.5371638  -70.04495  7.27%     -  890s
     0     0  -70.04495    0 11830  -75.53716  -70.04495  7.27%     -  923s
     0     0  -70.04495    0 13054  -75.53716  -70.04495  7.27%     - 1070s
H    0     0                     -75.5371341  -70.04495  7.27%     - 1095s
     0     0  -70.04495    0 12804  -75.53713  -70.04495  7.27%     - 1130s
     0     0  -70.04495    0 14513  -75.53713  -70.04495  7.27%     - 1200s

Cutting planes:
  Gomory: 1
  Lift-and-project: 3
  MIR: 74
  StrongCG: 11
  Flow cover: 38
  Zero half: 29

Explored 1 nodes (304020 simplex iterations) in 1200.26 seconds (5048.57 work units)
Thread count was 1 (of 64 available processors)

Solution count 8: -75.5371 -75.5372 -75.5546 ... -78.2582

Time limit reached
Best objective -7.553713414724e+01, best bound -7.004494709789e+01, gap 7.2708%
Tree policy:
if x1 <= 75.0:
    if x2 <= 159.0:
        if x2 <= 158.0:
            if x2 <= 138.0:
                if s2 <= 6.0:
                    if s1 <= 6.0:
                        return 'time'
                    else:
                        return 'rec_ack12'
                else:
                    return 'rec_ack21'
            else:
                if s2 <= 8.0:
                    return 'time'
                else:
                    if s2 <= 8.0:
                        return 'snd_idle21'
                    else:
                        return 'snd_idle12'
        else:
            if s2 <= 8.0:
                if y2 <= 2.0:
                    return 'rec_ack21'
                else:
                    return 'time'
            else:
                if s2 <= 8.0:
                    return 'snd_idle12'
                else:
                    if s2 <= 8.0:
                        return 'snd_idle21'
                    else:
                        return 'snd_idle12'
    else:
        if x2 <= 166.0:
            if x2 <= 165.0:
                if x2 <= 164.0:
                    return 'time'
                else:
                    if x2 <= 164.0:
                        return 'snd_idle21'
                    else:
                        return 'rec_req12'
            else:
                if s2 <= 8.0:
                    return 'snd_ack21'
                else:
                    return 'snd_idle12'
        else:
            if x2 <= 166.0:
                if s2 <= 8.0:
                    if y1 <= 2.0:
                        return 'rec_ack21'
                    else:
                        return 'snd_ack21'
                else:
                    return 'snd_idle12'
            else:
                if s2 <= 8.0:
                    return 'rec_ack21'
                else:
                    return 'snd_idle12'
else:
    if x1 <= 166.0:
        if x2 <= 164.0:
            if x2 <= 163.0:
                if s2 <= 8.0:
                    if x1 <= 163.0:
                        return 'time'
                    else:
                        return 'snd_ack12'
                else:
                    if s2 <= 8.0:
                        return 'time'
                    else:
                        return 'snd_idle12'
            else:
                if s2 <= 8.0:
                    return 'snd_req12'
                else:
                    if s2 <= 8.0:
                        return 'snd_idle12'
                    else:
                        return '__random__'
        else:
            if s2 <= 8.0:
                return 'time'
            else:
                return 'snd_idle12'
    else:
        if s2 <= 8.0:
            return 'time'
        else:
            if s2 <= 8.0:
                return 'time'
            else:
                if s2 <= 8.0:
                    return 'time'
                else:
                    if s2 <= 8.0:
                        return 'snd_idle12'
                    else:
                        return 'snd_idle21'
Optimal decision tree (depth=6) value: -75.5371341472445
Writing result files...
