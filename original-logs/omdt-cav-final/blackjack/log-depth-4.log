Solving...
Starting with fixed depth 4
Set parameter Username
Academic license - for non-commercial use only - expires 2025-09-20
Set parameter Threads to value 1
Set parameter TimeLimit to value 1200
Gurobi Optimizer version 10.0.0 build v10.0.0rc2 (linux64)

CPU model: AMD EPYC 9124 16-Core Processor, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 32 physical cores, 64 logical processors, using up to 1 threads

Optimize a model with 36275 rows, 11901 columns and 341457 nonzeros
Model fingerprint: 0x5ff363eb
Variable types: 1599 continuous, 10302 integer (10302 binary)
Coefficient statistics:
  Matrix range     [5e-04, 1e+02]
  Objective range  [1e+00, 2e+00]
  Bounds range     [1e+00, 1e+02]
  RHS range        [1e+00, 4e+00]
Presolve removed 76 rows and 91 columns
Presolve time: 0.89s
Presolved: 36199 rows, 11810 columns, 266450 nonzeros
Variable types: 1599 continuous, 10211 integer (10211 binary)
Found heuristic solution: objective -11.7322420
Root relaxation presolved: 36199 rows, 11810 columns, 266450 nonzeros


Root relaxation: objective -2.173209e+00, 5795 iterations, 0.87 seconds (3.17 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0   -2.17321    0  719  -11.73224   -2.17321  81.5%     -    2s
H    0     0                      -4.1221081   -2.17321  47.3%     -    2s
     0     0   -2.17321    0  738   -4.12211   -2.17321  47.3%     -    2s
     0     0   -2.17321    0  738   -4.12211   -2.17321  47.3%     -    3s
     0     0   -2.17321    0  573   -4.12211   -2.17321  47.3%     -    4s
     0     0   -2.17321    0  567   -4.12211   -2.17321  47.3%     -    4s
     0     0   -2.17321    0  599   -4.12211   -2.17321  47.3%     -    5s
     0     0   -2.17321    0  555   -4.12211   -2.17321  47.3%     -    5s
     0     0   -2.17321    0  741   -4.12211   -2.17321  47.3%     -    6s
     0     0   -2.17321    0  732   -4.12211   -2.17321  47.3%     -    6s
     0     0   -2.17321    0  736   -4.12211   -2.17321  47.3%     -    8s
     0     0   -2.17321    0  655   -4.12211   -2.17321  47.3%     -   10s
     0     0   -2.17321    0  655   -4.12211   -2.17321  47.3%     -   10s
H    0     0                      -2.3526163   -2.17321  7.63%     -   11s
     0     2   -2.17321    0  655   -2.35262   -2.17321  7.63%     -   13s
    13    15   -2.17321    7 1134   -2.35262   -2.17321  7.63%   910   15s
H  109    63                      -2.3526147   -2.17321  7.63%   305   19s
   137    74     cutoff   20        -2.35261   -2.17321  7.63%   268   20s
*  145    71              27      -2.2052715   -2.17321  1.45%   256   20s
   302   120     cutoff   26        -2.20527   -2.17321  1.45%   189   25s
H  331   127                      -2.2052703   -2.17321  1.45%   186   26s
   469   162   -2.18458   14  948   -2.20527   -2.17321  1.45%   158   30s
   672   248     cutoff   20        -2.20527   -2.17321  1.45%   140   35s
   772   265   -2.19520   14 1149   -2.20527   -2.17321  1.45%   147   40s
H  826   178                      -2.1859342   -2.17321  0.58%   141   43s
   880   198   -2.17321   29  839   -2.18593   -2.17321  0.58%   136   45s
H  910   193                      -2.1859339   -2.17321  0.58%   134   47s
   958   194   -2.17321   31  615   -2.18593   -2.17321  0.58%   142   50s
H  965   192                      -2.1859338   -2.17321  0.58%   141   51s
  1098   182   -2.17321   35  594   -2.18593   -2.17321  0.58%   141   55s
  1265   196   -2.17585   17  617   -2.18593   -2.17321  0.58%   142   60s
  1498   251   -2.17321   21 1020   -2.18593   -2.17321  0.58%   137   65s
  1533   260   -2.17321   16  685   -2.18593   -2.17321  0.58%   135   72s
  1535   262   -2.17321    9 1674   -2.18593   -2.17321  0.58%   134   75s
  1537   263   -2.17354   25  408   -2.18593   -2.17321  0.58%   134   84s
  1539   264   -2.18205   30  437   -2.18593   -2.17321  0.58%   134   88s
  1541   266   -2.17420   17  442   -2.18593   -2.17321  0.58%   134   92s
  1543   267   -2.17321   10  511   -2.18593   -2.17321  0.58%   134   95s
  1546   269   -2.17321   30  545   -2.18593   -2.17321  0.58%   133  101s
H 1546   255                      -2.1859337   -2.17321  0.58%   133  103s
  1551   260   -2.17321   12 1153   -2.18593   -2.17321  0.58%   168  105s
  1567   271   -2.17321   20  774   -2.18593   -2.17321  0.58%   173  111s
  1601   293   -2.17453   37 1791   -2.18593   -2.17321  0.58%   172  115s
  1632   296   -2.17321   20  486   -2.18593   -2.17321  0.58%   175  120s
  1672   323   -2.17321   40  554   -2.18593   -2.17321  0.58%   177  127s
  1684   325   -2.17805   47 1257   -2.18593   -2.17321  0.58%   177  130s
  1706   326   -2.17321   15 2049   -2.18593   -2.17321  0.58%   177  135s
  1719   334   -2.17321   22 1381   -2.18593   -2.17321  0.58%   179  140s
  1749   345   -2.17321   38 1149   -2.18593   -2.17321  0.58%   179  145s
H 1755   330                      -2.1859273   -2.17321  0.58%   179  146s
* 1780   300              58      -2.1793627   -2.17321  0.28%   178  149s
  1782   299   -2.17321   44 1018   -2.17936   -2.17321  0.28%   178  150s
H 1808   275                      -2.1745250   -2.17321  0.06%   177  153s
  1817   283   -2.17387   36 1415   -2.17453   -2.17321  0.06%   177  155s
  1855   294   -2.17387   40 1131   -2.17453   -2.17321  0.06%   176  160s
  1901   303   -2.17321   37  628   -2.17453   -2.17321  0.06%   173  165s
* 1912    86              48      -2.1732086   -2.17321  0.00%   176  168s

Cutting planes:
  Lift-and-project: 50
  Cover: 4
  MIR: 104
  Flow cover: 45
  Zero half: 234

Explored 1913 nodes (358815 simplex iterations) in 168.13 seconds (429.10 work units)
Thread count was 1 (of 64 available processors)

Solution count 10: -2.17321 -2.17453 -2.17936 ... -2.20527
No other solutions better than -2.17321

Optimal solution found (tolerance 1.00e-04)
Best objective -2.173208593160e+00, best bound -2.173208593160e+00, gap 0.0000%
Tree policy:
if player_total <= 13.0:
    if dealer_total <= 8.0:
        if player_total <= 11.0:
            return '(Draw)'
        else:
            if dealer_total <= 6.0:
                return '(Skip)'
            else:
                return '(Draw)'
    else:
        if dealer_total <= 10.0:
            if skipped <= 0.0:
                return '(Draw)'
            else:
                return '__random__'
        else:
            if player_total <= 11.0:
                return '(Draw)'
            else:
                return '(Skip)'
else:
    if dealer_total <= 9.0:
        if player_total <= 14.0:
            if dealer_total <= 6.0:
                return '(Skip)'
            else:
                return '(Draw)'
        else:
            if dealer_total <= 0.0:
                return '(Draw)'
            else:
                return '(Skip)'
    else:
        if dealer_total <= 17.0:
            return '(Skip)'
        else:
            if dealer_total <= 18.0:
                return '(Draw)'
            else:
                return '(Skip)'
Optimal decision tree (depth=4) value: -2.173208593159626
Writing result files...
