mdp
const int N = 3;
const int K = 32;
const int range = ((2 * (32 + 1)) * 3);
const int counter_init = ((32 + 1) * 3);
const int left = 3;
const int right = (((2 * (32 + 1)) * 3) - 3);

global counter: [0..range] init counter_init;


module process1
	pc1: [0..3] init 0;
	coin1: [0..1] init 0;
	[process1_cmd_0] (pc1 = 0) -> 1/2 : (pc1' = 1) & (coin1' = 0) + 1/2 : (pc1' = 1) & (coin1' = 1);
	[process1_cmd_1] (((pc1 = 1) & (coin1 = 0)) & (counter > 0)) -> 1 : (counter' = (counter - 1)) & (pc1' = 2) & (coin1' = 0);
	[process1_cmd_2] (((pc1 = 1) & (coin1 = 1)) & (counter < 198)) -> 1 : (counter' = (counter + 1)) & (pc1' = 2) & (coin1' = 0);
	[process1_cmd_3] ((pc1 = 2) & (counter <= 3)) -> 1 : (pc1' = 3) & (coin1' = 0);
	[process1_cmd_4] ((pc1 = 2) & (counter >= 195)) -> 1 : (pc1' = 3) & (coin1' = 1);
	[process1_cmd_5] (((pc1 = 2) & (counter > 3)) & (counter < 195)) -> 1 : (pc1' = 0);
	[done] (pc1 = 3) -> 1 : (pc1' = 3);
endmodule

module process2
	pc2: [0..3] init 0;
	coin2: [0..1] init 0;
	[process2_cmd_7] (pc2 = 0) -> 1/2 : (pc2' = 1) & (coin2' = 0) + 1/2 : (pc2' = 1) & (coin2' = 1);
	[process2_cmd_8] (((pc2 = 1) & (coin2 = 0)) & (counter > 0)) -> 1 : (counter' = (counter - 1)) & (pc2' = 2) & (coin2' = 0);
	[process2_cmd_9] (((pc2 = 1) & (coin2 = 1)) & (counter < 198)) -> 1 : (counter' = (counter + 1)) & (pc2' = 2) & (coin2' = 0);
	[process2_cmd_10] ((pc2 = 2) & (counter <= 3)) -> 1 : (pc2' = 3) & (coin2' = 0);
	[process2_cmd_11] ((pc2 = 2) & (counter >= 195)) -> 1 : (pc2' = 3) & (coin2' = 1);
	[process2_cmd_12] (((pc2 = 2) & (counter > 3)) & (counter < 195)) -> 1 : (pc2' = 0);
	[done] (pc2 = 3) -> 1 : (pc2' = 3);
endmodule

label "finished" = ((pc1 = 3) & (pc2 = 3));
label "all_coins_equal_0" = ((coin1 = 0) & (coin2 = 0));
label "all_coins_equal_1" = ((coin1 = 1) & (coin2 = 1));
label "agree" = (coin1 = coin2);
label "goal" = (((pc1 = 3) & (pc2 = 3)) & ((coin1 = 0) & (coin2 = 0)));
